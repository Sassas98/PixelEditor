plugins {
    id 'java'
    id 'application'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

group = 'com.example'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'net.sourceforge.plantuml:plantuml:1.2024.5'
    implementation 'com.thoughtworks.qdox:qdox:2.0.1'

    // JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'

    // Hibernate ORM + JPA
    implementation 'org.hibernate.orm:hibernate-core:6.4.4.Final'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'

    // H2 Database
    runtimeOnly 'com.h2database:h2:2.2.224'

    // JavaFX
    def javafxVersion = '21.0.2'
    def os = org.gradle.internal.os.OperatingSystem.current()
    def platform

    if (os.isWindows()) {
        platform = 'win'
    } else if (os.isMacOsX()) {
        platform = 'mac'
    } else if (os.isLinux()) {
        platform = 'linux'
    } else {
        throw new GradleException("Unsupported OS: ${os}")
    }

    ['base', 'controls', 'fxml', 'graphics', 'media'].each { mod ->
        implementation "org.openjfx:javafx-$mod:$javafxVersion:$platform"
    }
}

application {
    mainClass = 'org.example.MainApp'
}

test {
    useJUnitPlatform()
}

run {
    def osName = org.gradle.internal.os.OperatingSystem.current()
    def platform = ''
    if (osName.isWindows()) platform = 'win'
    else if (osName.isLinux()) platform = 'linux'
    else if (osName.isMacOsX()) platform = 'mac'

    jvmArgs = [
        "--module-path", configurations.runtimeClasspath.asPath,
        "--add-modules", "javafx.controls,javafx.fxml"
    ]
}

tasks.register("generatePUML", GeneratePumlTask) {
    group = "documentation"
    description = "Genera un file PlantUML con tutte le classi"

    inputDir.set(layout.projectDirectory.dir("src/main/java"))
    outputFile.set(layout.buildDirectory.file("uml/classes.puml"))
}

tasks.register("renderUML", JavaExec) {
    group = "documentation"
    description = "Converte il .puml in PNG con PlantUML"
    dependsOn("generatePUML")

    classpath = configurations.runtimeClasspath
    mainClass.set("net.sourceforge.plantuml.Run")
    args = [
        layout.buildDirectory.file("uml/classes.puml").get().asFile.absolutePath,
        "-tsvg",
        "-o", layout.buildDirectory.dir("uml").get().asFile.absolutePath
    ]
}





